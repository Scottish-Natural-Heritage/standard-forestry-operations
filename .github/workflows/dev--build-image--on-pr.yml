name: On-PR build of image

on:
  pull_request:
    branches: [develop]

env:
  ECR_REPOSITORY: naturescot/standard-forestry-operations
  PROJECT: licensing

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest

    steps:
      - name: Select environment
        id: select-environment
        run: |
          echo "dev"
          echo "environment=dev" >> "$GITHUB_OUTPUT"

    outputs:
      environment: ${{ steps.select-environment.outputs.environment }}

  build_and_push:
    name: Build and Push the Image
    needs: determine-environment
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install all the pre-requisites
        run: |
          npm ci

      - name: Check the linter
        run: |
          npm run lint

      - name: Check the integration tests
        run: |
          npm run test

      - name: Remove all the dev-only pre-requisites
        run: |
          npm prune --production

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag the Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:prerelease .

      - name: Push the Docker Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prerelease

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Force re-deployment if service exists
        id: redeploy-service
        env:
          CLUSTER_NAME: ${{env.PROJECT}}-${{env.ENVIRONMENT}}-cluster
          SERVICE_NAME: ${{env.PROJECT}}-${{env.ENVIRONMENT}}-standard-forestry-operations
        run: |
          echo Cluster: $CLUSTER_NAME
          echo Service: $SERVICE_NAME
          if [ $(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | jq '.services | length') == 1 ]
          then
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment > /dev/null
            echo service redeployed
          else
            echo service not redeployed
          fi
